{"version":3,"sources":["components/status/statuses.js","components/status/useStatus.js","components/status/index.js","components/status/useRefetch.js","components/useIssues.js","components/header/index.js","components/components/skeleton.js","components/components/component/statuses.js","components/components/component/status.js","components/components/component/useStatus.js","components/components/component/index.js","components/useDidMount.js","components/components/index.js","components/incidents/incident/index.js","components/incidents/skeleton.js","components/incidents/index.js","components/footer/index.js","components/App.js","serviceWorker.js","index.js"],"names":["message","backgroundColour","getComponentLabelPercent","components","label","filter","component","labels","find","componentLabel","name","length","StatusBar","styled","div","props","Status","h2","Reload","button","Code","code","loading","error","refetch","useState","status","setStatus","useEffect","statusSet","statuses","useStatus","updateTimeAgoDep","moment","Date","localStorage","getItem","fromNow","timeAgo","setTimeAgo","interval","setInterval","clearInterval","useRefetch","hasError","JSON","stringify","errors","onClick","results","setResults","setError","setLoading","fetchData","parse","fetch","process","then","response","json","data","setItem","catch","toString","Logo","h1","img","Header","src","alt","operational","colour","performanceIssues","partialOutage","majorOutage","unknown","Object","values","toLowerCase","Component","title","hasMounted","setHasMounted","useDidMount","map","id","Incident","active","Details","Title","Comment","Created","incident","closed_at","created_at","format","toUpperCase","source","body","Container","NoFound","incidents","Footer","Branding","a","visible","REACT_APP_BRANDING","href","rel","target","ComponentsContainer","useIssues","componentsLoading","componentsError","componentsResults","componentsRefetch","incidentsLoading","incidentsError","incidentsResults","incidentsRefetch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"0QAAe,EACA,CACXA,QAAS,0BACTC,iBAAkB,WAHP,EAKL,CACND,QAAS,uCACTC,iBAAkB,WAPP,EASL,CACND,QAAS,+CACTC,iBAAkB,WCchBC,EAA2B,SAACC,EAAYC,GAAb,OAI7B,IAHDD,EAAWE,QAAO,SAACC,GAAD,OACjBA,EAAUC,OAAOC,MAAK,SAACC,GAAD,OAAoBA,EAAeC,OAASN,QAClEO,OAEFR,EAAWQ,Q,uBCzBPC,EAAYC,IAAOC,IAAV,8PACO,SAACC,GAAD,OAClBA,EAAMd,iBAAmBc,EAAMd,iBAAmB,aAYhDe,EAASH,IAAOI,GAAV,sFAMNC,EAASL,IAAOM,OAAV,wLAUNC,EAAOP,IAAOQ,KAAV,yEAMK,cAA8C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,MAAOpB,EAA0B,EAA1BA,WAAYqB,EAAc,EAAdA,QAC5C,EDvCa,SAACrB,GACd,MAA4BsB,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KAkBA,OAhBAC,qBAAU,WACR,IAAIC,GAAY,EAEZ3B,EAAyBC,EAAY,eAAiB,KACxDwB,EAAUG,GACVD,GAAY,GAGV3B,EAAyBC,EAAY,gBAAkB,IACzDwB,EAAUG,GACVD,GAAY,GAGTA,GAAWF,EAAUG,KACzB,CAAC3B,IAEG,CAACuB,GCoBSK,CAAU5B,GAApBuB,EAAP,oBACA,ECxCa,SAACF,EAASQ,GACvB,MAA8BP,mBAC5BQ,IACE,IAAIC,KAAKC,aAAaC,QAAb,mCACTC,WAHJ,mBAAOC,EAAP,KAAgBC,EAAhB,KAyCA,OAnCAX,qBAAU,WACR,IAAMY,EAAWC,aAAY,WAEzB,IAAIP,KAAKC,aAAaC,QAAb,kCACT,IAAIF,KAAS,KAEbV,GAAQ,WACNe,EACEN,IACE,IAAIC,KAAKC,aAAaC,QAAb,mCACTC,cAINE,EACEN,IACE,IAAIC,KAAKC,aAAaC,QAAb,mCACTC,aAGL,KAEH,OAAO,WACLK,cAAcF,MAEf,CAAChB,IAEJI,qBAAU,WACRW,EACEN,IACE,IAAIC,KAAKC,aAAaC,QAAb,mCACTC,aAEH,CAACL,IAEG,CAACM,GDFUK,CAAWnB,EAASF,GAA/BgB,EAAP,oBAEA,OACE,qCACGf,EAAMqB,UACL,eAACxB,EAAD,WACE,mDACA,sHAICyB,KAAKC,UAAUvB,EAAMwB,OAAQ,KAAM,MAGxC,eAACnC,EAAD,CAAWX,iBAAgB,OAAEyB,QAAF,IAAEA,OAAF,EAAEA,EAAQzB,iBAArC,UACE,cAACe,EAAD,iBAASU,QAAT,IAASA,OAAT,EAASA,EAAQ1B,UACjB,cAACkB,EAAD,CAAQ8B,QAASxB,EAAjB,SAA2BF,EAAU,YAAcgB,WEzD5C,WAAClC,GACd,MAA8BqB,mBAAS,IAAvC,mBAAOwB,EAAP,KAAgBC,EAAhB,KACA,EAA0BzB,qBAA1B,mBAAOF,EAAP,KAAc4B,EAAd,KACA,EAA8B1B,oBAAS,GAAvC,mBAAOH,EAAP,KAAgB8B,EAAhB,KAgBA,OAdAxB,qBAAU,WAGN,IAAIM,KAAKC,aAAaC,QAAb,8BAA4ChC,KACrD,IAAI8B,KAAS,KAEbmB,EAAUD,EAAYD,EAAUD,EAAY9C,IAE5C8C,EAAWL,KAAKS,MAAMnB,aAAaC,QAAb,qBAAmChC,MACzDgD,GAAW,GACXD,OAED,CAAC/C,IAEG,CACLkB,EACAC,EACA0B,GAAW,GACX,kBAAMI,EAAUD,EAAYD,EAAUD,EAAY9C,MAIhDiD,EAAY,SAACD,EAAYD,EAAUD,EAAY9C,GACnDgD,GAAW,GACXG,MAAM,gCAAD,OAC6BC,iBAD7B,2CACgGpD,IAElGqD,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLT,IACAhB,aAAa0B,QAAb,8BAA4CzD,GAAS,IAAI8B,MACzDC,aAAa0B,QAAb,qBAAmCzD,GAASyC,KAAKC,UAAUc,IAC3DV,EAAWU,GACXR,GAAW,MAEZU,OAAM,SAACvC,GACN4B,EAAS5B,EAAMwC,YACf5B,aAAa0B,QAAb,8BAA4CzD,GAAS,IAAI8B,MACzDgB,EAAWL,KAAKS,MAAMnB,aAAaC,QAAb,qBAAmChC,MACzDgD,GAAW,OCvCXY,GANQnD,IAAOoD,GAAV,0FAMEpD,IAAOqD,IAAV,8CAIJC,EAAStD,IAAOC,IAAV,2EAKG,oBAEX,cAACqD,EAAD,UAEI,cAACH,EAAD,CACEI,IAAKZ,wEACLa,IAAKb,uBCtBA3C,MAAOC,IAAtB,yKCFe,GACbwD,YAAa,CACX5D,KAAM,cACN6D,OAAQ,UACRtE,iBAAkB,0BAEpBuE,kBAAmB,CACjB9D,KAAM,qBACN6D,OAAQ,UACRtE,iBAAkB,2BAEpBwE,cAAe,CACb/D,KAAM,iBACN6D,OAAQ,UACRtE,iBAAkB,4BAEpByE,YAAa,CACXhE,KAAM,eACN6D,OAAQ,UACRtE,iBAAkB,0BAEpB0E,QAAS,CACPjE,KAAM,UACN6D,OAAQ,UACRtE,iBAAkB,6BCpBhBe,EAASH,IAAOC,IAAV,4JACD,SAACC,GAAD,OAAWA,EAAMwD,UACN,SAACxD,GAAD,OAAWA,EAAMd,oBAOxB,eAAiB,IAC9B,ECXa,SAACM,GACd,MAA4BkB,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KAYA,OAVAC,qBAAU,WACRD,EACEiD,OAAOC,OAAO/C,GAAUtB,MAAK,SAACkB,GAAD,OAC3BnB,EAAOC,MAAK,SAACJ,GAAD,OAAWA,EAAMM,OAASgB,EAAOhB,KAAKoE,uBAGrD,CAACvE,IAECmB,GAAQC,EAAUG,EAAS6C,SAEzB,CAACjD,GDFSK,CADY,EAAbxB,QACTmB,EAAP,oBAEA,OACE,cAAC,EAAD,CAAQ6C,OAAM,OAAE7C,QAAF,IAAEA,OAAF,EAAEA,EAAQ6C,OAAQtE,iBAAgB,OAAEyB,QAAF,IAAEA,OAAF,EAAEA,EAAQzB,iBAA1D,gBACGyB,QADH,IACGA,OADH,EACGA,EAAQhB,QEdTqE,GAAYlE,IAAOC,IAAV,2OAaA,eAAoB,IAAjBR,EAAgB,EAAhBA,UAChB,OACE,eAACyE,GAAD,WACGzE,EAAU0E,MADb,IACoB,cAAC,GAAD,CAAQzE,OAAQD,EAAUC,aClBnC,cACb,MAAoCkB,qBAApC,mBAAOwD,EAAP,KAAmBC,EAAnB,KAMA,OAJAtD,qBAAU,WACRsD,GAAc,KACb,IAEI,CAACD,ICJK,eAA8B,IAA3B3D,EAA0B,EAA1BA,QAASnB,EAAiB,EAAjBA,WACzB,EAAqBgF,KAAdF,EAAP,oBAEA,OAAQ3D,GAAW2D,GACP,OAAV9E,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,QAAS,EAArB,OACER,QADF,IACEA,OADF,EACEA,EAAYiF,KAAI,SAAC9E,GAAD,OACd,cAAC,GAAD,CAA8BA,UAAWA,GAAzBA,EAAU+E,OAG5B,qDAGF,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,SCfAC,GAAWzE,IAAOC,IAAV,8RAGR,SAACC,GAAD,OACAA,EAAMwE,OAAS,0BAA4B,6BAY3CC,GAAU3E,IAAOC,IAAV,gIAOP2E,GAAQ5E,IAAOC,IAAV,mHAOL4E,GAAU7E,IAAOC,IAAV,6EAKPE,GAASH,IAAOC,IAAV,4JACD,SAACC,GAAD,OAAYA,EAAMwE,OAAS,UAAY,aAC5B,SAACxE,GAAD,OAClBA,EAAMwE,OAAS,2BAA6B,6BAO1CI,GAAU9E,IAAOC,IAAV,yFAME,mBAAG8E,EAAH,EAAGA,SAAH,OACb,eAACN,GAAD,CAAUC,OAAQK,EAASC,UAA3B,UACE,eAACL,GAAD,WACE,cAACG,GAAD,UACG1D,IAAO2D,EAASE,YACdC,OAAO,wBACPC,gBAEL,cAAC,GAAD,CAAQT,OAAQK,EAASC,UAAzB,SACGD,EAASC,UAAY,SAAW,cAGrC,cAAC,GAAD,UAAQD,EAASZ,QACjB,cAACU,GAAD,UACE,cAAC,KAAD,CAAeO,OAAQL,EAASM,aCpEvBrF,OAAOC,IAAtB,8NCIMqF,GAAYtF,IAAOC,IAAV,+EAKT2E,GAAQ5E,IAAOC,IAAV,4FAMLsF,GAAUvF,IAAOC,IAAV,8CAIE,eAA6B,IAA1BQ,EAAyB,EAAzBA,QAAS+E,EAAgB,EAAhBA,UACzB,EAAqBlB,KAAdF,EAAP,oBAEA,OACE,eAACkB,GAAD,WACE,cAAC,GAAD,yBACE7E,GAAW2D,GACF,OAAToB,QAAS,IAATA,OAAA,EAAAA,EAAW1F,QAAS,EAApB,OACE0F,QADF,IACEA,OADF,EACEA,EAAWjB,KAAI,SAACQ,GAAD,OACb,cAAC,GAAD,CAA4BA,SAAUA,GAAvBA,EAASP,OAG1B,cAACe,GAAD,kCAGF,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,WCpCJE,GAASzF,IAAOC,IAAV,sGAMNyF,GAAW1F,IAAO2F,EAAV,yKAKD,SAACzF,GAAD,OAAYA,EAAM0F,QAAU,QAAU,UAOpC,qBACb,eAACH,GAAD,WACE,wBACA,cAACC,GAAD,CACEE,QAA4C,UAAnCjD,ooBAAYkD,mBACrBC,KAAK,wBACLC,IAAI,WACJC,OAAO,SAJT,kCCdEV,GAAYtF,IAAOC,IAAV,0FAMTgG,GAAsBjG,IAAOC,IAAV,wJAOV,cAEb,MAKIiG,EAAU,aALd,mBACEC,EADF,KAEEC,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAMA,EAKIJ,EAAU,YALd,mBACEK,EADF,KAEEC,EAFF,KAGEC,EAHF,KAIEC,EAJF,KAOA,OACE,eAAC,GAAD,WACE,cAAC,EAAD,IACA,eAACT,GAAD,WACE,cAAC,EAAD,CACExF,QAAS0F,GAAqBI,EAC9B7F,MAAO,CACLqB,SAAUqE,GAAmBI,EAC7BtE,OAAQ,CAAEkE,kBAAiBI,mBAE7BlH,WAAY+G,EACZ1F,QAAS,WACP2F,IACAI,OAGJ,cAAC,GAAD,CACEjG,QAAS0F,EACT7G,WAAY+G,OAGhB,cAAC,GAAD,CAAW5F,QAAS8F,EAAkBf,UAAWiB,IACjD,cAAC,GAAD,QChDcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdxE,OAAM,SAAAvC,GACLgH,QAAQhH,MAAMA,EAAMvB,c","file":"static/js/main.9da189e3.chunk.js","sourcesContent":["export default {\r\n  operational: {\r\n    message: \"All Systems Operational\",\r\n    backgroundColour: \"#3da751\",\r\n  },\r\n  issues: {\r\n    message: \"Some systems are experiencing issues\",\r\n    backgroundColour: \"#4990e2\",\r\n  },\r\n  outage: {\r\n    message: \"Some systems are experiencing a major outage\",\r\n    backgroundColour: \"#d94430\",\r\n  },\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport statuses from \"./statuses\";\r\n\r\nexport default (components) => {\r\n  const [status, setStatus] = useState();\r\n\r\n  useEffect(() => {\r\n    let statusSet = false;\r\n\r\n    if (getComponentLabelPercent(components, \"operational\") < 70) {\r\n      setStatus(statuses.issues);\r\n      statusSet = true;\r\n    }\r\n\r\n    if (getComponentLabelPercent(components, \"major outage\") > 0) {\r\n      setStatus(statuses.outage);\r\n      statusSet = true;\r\n    }\r\n\r\n    if (!statusSet) setStatus(statuses.operational);\r\n  }, [components]);\r\n\r\n  return [status];\r\n};\r\n\r\nconst getComponentLabelPercent = (components, label) =>\r\n  (components.filter((component) =>\r\n    component.labels.find((componentLabel) => componentLabel.name === label)\r\n  ).length *\r\n    100) /\r\n  components.length;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useStatus from \"./useStatus\";\r\nimport useRefetch from \"./useRefetch\";\r\n\r\nconst StatusBar = styled.div`\r\n  background-color: ${(props) =>\r\n    props.backgroundColour ? props.backgroundColour : \"#b1b1b1\"};\r\n  color: white;\r\n  padding: 16px;\r\n  border-radius: 3px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  transition: 0.3s;\r\n`;\r\n\r\nconst Status = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n  font-weight: normal;\r\n`;\r\n\r\nconst Reload = styled.button`\r\n  background-color: transparent;\r\n  color: white;\r\n  text-decoration: underline;\r\n  border: none;\r\n  cursor: pointer;\r\n  text-align: right;\r\n  padding: 0;\r\n`;\r\n\r\nconst Code = styled.code`\r\n  white-space: pre-wrap;\r\n  display: block;\r\n`;\r\n\r\n// TODO: change all systems status based on current status of all components\r\nexport default ({ loading, error, components, refetch }) => {\r\n  const [status] = useStatus(components);\r\n  const [timeAgo] = useRefetch(refetch, loading);\r\n\r\n  return (\r\n    <>\r\n      {error.hasError && (\r\n        <Code>\r\n          <div>An error occured</div>\r\n          <div>\r\n            You may have exceeded the rate limit. Try again in 1 hour to fetch\r\n            the latest data.\r\n          </div>\r\n          {JSON.stringify(error.errors, null, 3)}\r\n        </Code>\r\n      )}\r\n      <StatusBar backgroundColour={status?.backgroundColour}>\r\n        <Status>{status?.message}</Status>\r\n        <Reload onClick={refetch}>{loading ? \"reloading\" : timeAgo}</Reload>\r\n      </StatusBar>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nexport default (refetch, updateTimeAgoDep) => {\r\n  const [timeAgo, setTimeAgo] = useState(\r\n    moment(\r\n      new Date(localStorage.getItem(`vigorStatusLastFetchcomponent`))\r\n    ).fromNow()\r\n  );\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (\r\n        new Date(localStorage.getItem(`vigorStatusLastFetchcomponent`)) <\r\n        new Date() - 240000\r\n      ) {\r\n        refetch(() => {\r\n          setTimeAgo(\r\n            moment(\r\n              new Date(localStorage.getItem(`vigorStatusLastFetchcomponent`))\r\n            ).fromNow()\r\n          );\r\n        });\r\n      } else {\r\n        setTimeAgo(\r\n          moment(\r\n            new Date(localStorage.getItem(`vigorStatusLastFetchcomponent`))\r\n          ).fromNow()\r\n        );\r\n      }\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [refetch]);\r\n\r\n  useEffect(() => {\r\n    setTimeAgo(\r\n      moment(\r\n        new Date(localStorage.getItem(`vigorStatusLastFetchcomponent`))\r\n      ).fromNow()\r\n    );\r\n  }, [updateTimeAgoDep]);\r\n\r\n  return [timeAgo];\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default (label) => {\r\n  const [results, setResults] = useState([]);\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // GitHub rate limiting: 60 requests per hour/unauthenticated - fetches 15 times per hour / sending 30 requests (2 requests per fetch) and caches in localStorage\r\n    if (\r\n      new Date(localStorage.getItem(`vigorStatusLastFetch${label}`)) <\r\n      new Date() - 240000\r\n    ) {\r\n      fetchData(setLoading, setError, setResults, label);\r\n    } else {\r\n      setResults(JSON.parse(localStorage.getItem(`vigorStatus${label}`)));\r\n      setLoading(false);\r\n      setError();\r\n    }\r\n  }, [label]);\r\n\r\n  return [\r\n    loading,\r\n    error,\r\n    results || [],\r\n    () => fetchData(setLoading, setError, setResults, label),\r\n  ];\r\n};\r\n\r\nconst fetchData = (setLoading, setError, setResults, label) => {\r\n  setLoading(true);\r\n  fetch(\r\n    `https://api.github.com/repos/${process.env.REACT_APP_REPOSITORY}/issues?state=all&labels=status,${label}`\r\n  )\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((data) => {\r\n      setError();\r\n      localStorage.setItem(`vigorStatusLastFetch${label}`, new Date());\r\n      localStorage.setItem(`vigorStatus${label}`, JSON.stringify(data));\r\n      setResults(data);\r\n      setLoading(false);\r\n    })\r\n    .catch((error) => {\r\n      setError(error.toString());\r\n      localStorage.setItem(`vigorStatusLastFetch${label}`, new Date());\r\n      setResults(JSON.parse(localStorage.getItem(`vigorStatus${label}`)));\r\n      setLoading(false);\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  height: 30px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  text-align: center;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nexport default () =>\r\n  process.env.REACT_APP_LOGO || process.env.REACT_APP_NAME ? (\r\n    <Header>\r\n      {process.env.REACT_APP_LOGO ? (\r\n        <Logo\r\n          src={process.env.REACT_APP_LOGO}\r\n          alt={process.env.REACT_APP_NAME}\r\n        />\r\n      ) : (\r\n        <Title>{process.env.REACT_APP_NAME}</Title>\r\n      )}\r\n    </Header>\r\n  ) : null;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  width: 100%;\r\n  height: 44px;\r\n  border-radius: 3px;\r\n  background-color: #f7f8f9;\r\n\r\n  :not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n","export default {\r\n  operational: {\r\n    name: \"Operational\",\r\n    colour: \"#247234\",\r\n    backgroundColour: \"rgba(61, 167, 81, 0.1)\",\r\n  },\r\n  performanceIssues: {\r\n    name: \"Performance Issues\",\r\n    colour: \"#2f5888\",\r\n    backgroundColour: \"rgba(73, 144, 226, 0.1)\",\r\n  },\r\n  partialOutage: {\r\n    name: \"Partial Outage\",\r\n    colour: \"#74582a\",\r\n    backgroundColour: \"rgba(255, 198, 103, 0.1)\",\r\n  },\r\n  majorOutage: {\r\n    name: \"Major Outage\",\r\n    colour: \"#8e3b31\",\r\n    backgroundColour: \"rgba(217, 68, 48, 0.1)\",\r\n  },\r\n  unknown: {\r\n    name: \"Unknown\",\r\n    colour: \"#6e6b6b\",\r\n    backgroundColour: \"rgba(177, 177, 177, 0.1)\",\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useStatus from \"./useStatus\";\r\n\r\nconst Status = styled.div`\r\n  color: ${(props) => props.colour};\r\n  background-color: ${(props) => props.backgroundColour};\r\n  padding: 5px 12px;\r\n  border-radius: 16px;\r\n  font-size: 13px;\r\n  transition: 0.3s;\r\n`;\r\n\r\nexport default ({ labels }) => {\r\n  const [status] = useStatus(labels);\r\n\r\n  return (\r\n    <Status colour={status?.colour} backgroundColour={status?.backgroundColour}>\r\n      {status?.name}\r\n    </Status>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport statuses from \"./statuses\";\r\n\r\nexport default (labels) => {\r\n  const [status, setStatus] = useState();\r\n\r\n  useEffect(() => {\r\n    setStatus(\r\n      Object.values(statuses).find((status) =>\r\n        labels.find((label) => label.name === status.name.toLowerCase())\r\n      )\r\n    );\r\n  }, [labels]);\r\n\r\n  if (!status) setStatus(statuses.unknown);\r\n\r\n  return [status];\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Status from \"./status\";\r\n\r\nconst Component = styled.div`\r\n  background-color: #f7f8f9;\r\n  padding: 8px 16px;\r\n  border-radius: 3px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  display: flex;\r\n\r\n  :not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nexport default ({ component }) => {\r\n  return (\r\n    <Component>\r\n      {component.title} <Status labels={component.labels} />\r\n    </Component>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [hasMounted, setHasMounted] = useState();\r\n\r\n  useEffect(() => {\r\n    setHasMounted(true);\r\n  }, []);\r\n\r\n  return [hasMounted];\r\n};\r\n","import React from \"react\";\r\nimport Skeleton from \"./skeleton\";\r\nimport Component from \"./component\";\r\nimport useDidMount from \"../useDidMount\";\r\n\r\nexport default ({ loading, components }) => {\r\n  const [hasMounted] = useDidMount();\r\n\r\n  return !loading || hasMounted ? (\r\n    components?.length > 0 ? (\r\n      components?.map((component) => (\r\n        <Component key={component.id} component={component} />\r\n      ))\r\n    ) : (\r\n      <p>No Components found.</p>\r\n    )\r\n  ) : (\r\n    <>\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nconst Incident = styled.div`\r\n  transition: 0.3s;\r\n  border-left: 16px solid\r\n    ${(props) =>\r\n      props.active ? \"rgba(177, 177, 177,0.2)\" : \"rgba(73, 144, 226, 0.2)\"};\r\n  background-color: white;\r\n  border-radius: 3px;\r\n  padding: 16px;\r\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\r\n  margin-top: 8px;\r\n\r\n  :not(:last-child) {\r\n    margin-bottom: 16px;\r\n  }\r\n`;\r\n\r\nconst Details = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  margin-right: 16px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  color: #1e1e1e;\r\n`;\r\n\r\nconst Comment = styled.div`\r\n  white-space: break-spaces;\r\n  color: #1e1e1e;\r\n`;\r\n\r\nconst Status = styled.div`\r\n  color: ${(props) => (props.active ? \"#6e6b6b\" : \"#2f5888\")};\r\n  background-color: ${(props) =>\r\n    props.active ? \"rgba(177, 177, 177, 0.1)\" : \"rgba(73, 144, 226, 0.1)\"};\r\n  padding: 5px 12px;\r\n  border-radius: 16px;\r\n  font-size: 13px;\r\n  transition: 0.3s;\r\n`;\r\n\r\nconst Created = styled.div`\r\n  font-size: 13px;\r\n  color: #6e6b6b;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport default ({ incident }) => (\r\n  <Incident active={incident.closed_at}>\r\n    <Details>\r\n      <Created>\r\n        {moment(incident.created_at)\r\n          .format(\"MMMM Do YYYY, h:mm a\")\r\n          .toUpperCase()}\r\n      </Created>\r\n      <Status active={incident.closed_at}>\r\n        {incident.closed_at ? \"Closed\" : \"Active\"}\r\n      </Status>\r\n    </Details>\r\n    <Title>{incident.title}</Title>\r\n    <Comment>\r\n      <ReactMarkdown source={incident.body} />\r\n    </Comment>\r\n  </Incident>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  width: 100%;\r\n  height: 84px;\r\n  border-radius: 3px;\r\n  background-color: white;\r\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\r\n\r\n  :not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Incident from \"./incident\";\r\nimport Skeleton from \"./skeleton\";\r\nimport useDidMount from \"../useDidMount\";\r\n\r\nconst Container = styled.div`\r\n  margin: 32px auto 0 auto;\r\n  max-width: 1040px;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  padding: 0 16px;\r\n  font-size: 20px;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\nconst NoFound = styled.div`\r\n  margin: 0 8px;\r\n`;\r\n\r\nexport default ({ loading, incidents }) => {\r\n  const [hasMounted] = useDidMount();\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Incidents</Title>\r\n      {!loading || hasMounted ? (\r\n        incidents?.length > 0 ? (\r\n          incidents?.map((incident) => (\r\n            <Incident key={incident.id} incident={incident} />\r\n          ))\r\n        ) : (\r\n          <NoFound>No Incidents found.</NoFound>\r\n        )\r\n      ) : (\r\n        <>\r\n          <Skeleton />\r\n          <Skeleton />\r\n          <Skeleton />\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 16px;\r\n`;\r\n\r\nconst Branding = styled.a`\r\n  color: #6e6b6b;\r\n  font-size: 13px;\r\n  text-decoration: none;\r\n  transition: 0.3s;\r\n  display: ${(props) => (props.visible ? \"block\" : \"none\")};\r\n\r\n  :hover {\r\n    opacity: 0.9;\r\n  }\r\n`;\r\n\r\nexport default () => (\r\n  <Footer>\r\n    <div></div>\r\n    <Branding\r\n      visible={process.env.REACT_APP_BRANDING !== \"false\"}\r\n      href=\"https://vedilink.com/\"\r\n      rel=\"noopener\"\r\n      target=\"_blank\"\r\n    >\r\n      Powered by Vigor\r\n    </Branding>\r\n  </Footer>\r\n);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport styled from \"styled-components\";\r\nimport Status from \"./status\";\r\nimport useIssues from \"./useIssues\";\r\nimport Header from \"./header\";\r\nimport Components from \"./components\";\r\nimport Incidents from \"./incidents\";\r\nimport Footer from \"./footer\";\r\n\r\nconst Container = styled.div`\r\n  max-width: 1008px;\r\n  padding: 16px;\r\n  margin: 16px auto;\r\n`;\r\n\r\nconst ComponentsContainer = styled.div`\r\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\r\n  border-radius: 3px;\r\n  background-color: white;\r\n  padding: 16px;\r\n`;\r\n\r\nexport default () => {\r\n  // loading, errors, results, refetch\r\n  const [\r\n    componentsLoading,\r\n    componentsError,\r\n    componentsResults,\r\n    componentsRefetch,\r\n  ] = useIssues(\"component\");\r\n  const [\r\n    incidentsLoading,\r\n    incidentsError,\r\n    incidentsResults,\r\n    incidentsRefetch,\r\n  ] = useIssues(\"incident\");\r\n\r\n  return (\r\n    <Container>\r\n      <Header />\r\n      <ComponentsContainer>\r\n        <Status\r\n          loading={componentsLoading || incidentsLoading}\r\n          error={{\r\n            hasError: componentsError || incidentsError,\r\n            errors: { componentsError, incidentsError },\r\n          }}\r\n          components={componentsResults}\r\n          refetch={() => {\r\n            componentsRefetch();\r\n            incidentsRefetch();\r\n          }}\r\n        />\r\n        <Components\r\n          loading={componentsLoading}\r\n          components={componentsResults}\r\n        />\r\n      </ComponentsContainer>\r\n      <Incidents loading={incidentsLoading} incidents={incidentsResults} />\r\n      <Footer />\r\n    </Container>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}